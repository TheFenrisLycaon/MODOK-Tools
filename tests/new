 
 
def test_passing_wrong_but_regex_code_1():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_10():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01A4{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_100():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"05C{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_101():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"05D{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_102():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"05E{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_103():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"06{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_104():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"06A{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_105():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"06A1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_106():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"06B{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_107():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"06B1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_108():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"06C{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_109():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"06C1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_11():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01B{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_110():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"06C2{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_111():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"06D{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_112():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"06D1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_113():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"06D2{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_114():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"06D3{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_115():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"07{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_116():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"07A{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_117():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"07B{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_118():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"07B1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_119():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"08{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_12():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01C{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_13():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01C1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_14():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"02{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_15():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"02A{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_16():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"02A1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_17():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"02A2{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_18():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"02A3{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_19():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"02B{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_2():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01A{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_20():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"02B1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_21():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_22():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03A{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_23():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03A1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_24():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03A2{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_25():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03A3{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_26():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03A4{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_27():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03B{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_28():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03B1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_29():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03B10{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_3():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01A1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_30():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03B2{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_31():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03B3{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_32():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03B4{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_33():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03B5{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_34():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03B6{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_35():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03B7{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_36():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03B8{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_37():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03B9{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_38():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_39():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_4():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01A2{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_40():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_41():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_42():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A10{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_43():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A11{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_44():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A12{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_45():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A13{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_46():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A14{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_47():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A15{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_48():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A16{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_49():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A17{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_5():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01A2A{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_50():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A18{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_51():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A2{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_52():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A3{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_53():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A4{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_54():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A5{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_55():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A6{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_56():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A7{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_57():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A8{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_58():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1A9{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_59():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1B{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_6():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01A2A1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_60():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1B1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_61():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1C{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_62():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C1C1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_63():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C2{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_64():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C2A{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_65():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C2B{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_66():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C3{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_67():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C3A{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_68():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C3A1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_69():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C3A2{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_7():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01A2B{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_70():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C3A3{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_71():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C3A4{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_72():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C3B{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_73():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C3B1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_74():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C4{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_75():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03C4A{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_76():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03D{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_77():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03D1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_78():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03D2{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_79():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03D3{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_8():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01A2B1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_80():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03D4{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_81():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"03D5{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_82():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_83():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04A{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_84():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04A1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_85():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04A2{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_86():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04A3{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_87():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04A4{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_88():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04A5{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_89():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04A6{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_9():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"01A3{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_90():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04A7{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_91():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04A99{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_92():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04B{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_93():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04B1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_94():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04B2{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_95():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04C{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_96():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"04C1{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_97():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"05{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_98():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"05A{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
 
 
def test_passing_wrong_but_regex_code_99():
    # Passing a long value which somewhat matches with our internal regex pattern, it is long enough so that,
    # it doesn't conflict with user created directories with the exact code loaded from the config file.
    lorem_ipsum = "3122323-somelongrandomloremipsum"
    dir_code = f"05B{lorem_ipsum}"
    dir_path = DIR_NOT_FOUND
    assert initial_check(dir_code) == dir_path
